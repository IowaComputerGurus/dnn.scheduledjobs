<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddContent.Action" xml:space="preserve">
    <value>Add Content</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;Scheduled SQL Jobs&lt;/h1&gt;
&lt;h2&gt;Provided by IowaComputerGurus Inc&lt;/h2&gt;
&lt;h3&gt;About the Module&lt;/h3&gt;
&lt;p&gt;Keeping a DotNetNuke site database clean can be a real nightmare for those hosting sites on shared hosting providers.  With this free module we can help reduce the effort needed to keep your database working smooth as can be.  The Scheduled SQL Jobs module is a Host level module designed to allow DotNetNuke users to configure a set of known performance optimizing SQL scripts on a scheduled basi.&lt;/p&gt;

&lt;h3&gt;Donations&lt;/h3&gt;

&lt;p&gt;If you find this module helpful we do accept donations, all proceeds go towards future development of the module.  You can learn more by visiting: &lt;a href="http://www.iowacomputergurus.com/free-products/dotnetnuke-modules/scheduled-sql-jobs.aspx"&gt;The Scheduled SQL Jobs Module Info Page&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;License&lt;/h3&gt;
&lt;p&gt;Copyright (c) 2008-2009 IowaComputerGurus Inc (http://www.iowacomputergurus.com)&lt;br /&gt;
 Copyright Contact: webmaster@iowacomputergurus.com&lt;/p&gt;
&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy 
 of this software and associated documentation files (the "Software"), to deal 
 in the Software without restriction, including without limitation the rights to use, 
 copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, 
 and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt;
 
 &lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial 
 portions of the Software. &lt;/p&gt;

 &lt;p&gt;THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
 NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE 
 OR THE USE OR OTHER DEALINGS IN THE SOFTWARE&lt;/p&gt;</value>
  </data>
  <data name="DefaultContent.Text" xml:space="preserve">
    <value>Here is some sample content</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="JobFrequencyFormat.Text" xml:space="preserve">
    <value>Numbers only</value>
  </data>
  <data name="JobFrequencyRequired.Text" xml:space="preserve">
    <value>Must specify frequency</value>
  </data>
  <data name="JobScript.Header" xml:space="preserve">
    <value>Job Script</value>
  </data>
  <data name="JobTitle.Header" xml:space="preserve">
    <value>Job Title</value>
  </data>
  <data name="LastJobRun.Header" xml:space="preserve">
    <value>Last Run</value>
  </data>
  <data name="lblAddEditHeader.Text" xml:space="preserve">
    <value>&lt;h2&gt;Add/Edit Job&lt;/h2&gt;</value>
  </data>
  <data name="lblFrequency.Help" xml:space="preserve">
    <value>How often should the job be executed</value>
  </data>
  <data name="lblFrequency.Text" xml:space="preserve">
    <value>Job Frequency</value>
  </data>
  <data name="lblHostOnly.Text" xml:space="preserve">
    <value>&lt;h2&gt;Host Only Access&lt;/h2&gt;&lt;p&gt;Only host users can access this module.&lt;/p&gt;</value>
  </data>
  <data name="lblJobDescription.Help" xml:space="preserve">
    <value>A description of the selected job type</value>
  </data>
  <data name="lblJobDescription.Text" xml:space="preserve">
    <value>Job Description</value>
  </data>
  <data name="lblJobScript.Help" xml:space="preserve">
    <value>The SQL script to be executed</value>
  </data>
  <data name="lblJobScript.Text" xml:space="preserve">
    <value>Job Script</value>
  </data>
  <data name="lblJobType.Help" xml:space="preserve">
    <value>The type of job to execute</value>
  </data>
  <data name="lblJobType.Text" xml:space="preserve">
    <value>Job Type</value>
  </data>
  <data name="lblViewHeader.Text" xml:space="preserve">
    <value>&lt;h2&gt;Existing Jobs&lt;/h2&gt;&lt;p&gt;The following jobs are currently in the system.&lt;/p&gt;</value>
  </data>
  <data name="NextJobRun.Header" xml:space="preserve">
    <value>Next Run</value>
  </data>
  <data name="Schedule.Header" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="btnAddJob.Text" xml:space="preserve">
    <value>Add New Job!</value>
  </data>
  <data name="btnReturn.Text" xml:space="preserve">
    <value>Return to List</value>
  </data>
  <data name="Detail.Header" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="ExecuteTime.Header" xml:space="preserve">
    <value>Execute Time</value>
  </data>
  <data name="lblJobFrequency.Help" xml:space="preserve">
    <value>How often will the job run</value>
  </data>
  <data name="lblJobFrequency.Text" xml:space="preserve">
    <value>Execution Frequency</value>
  </data>
  <data name="lblJobHistoryHeader.Text" xml:space="preserve">
    <value>&lt;h2&gt;Job History&lt;/h2&gt;&lt;p&gt;The job history for the selected job&lt;/p&gt;</value>
  </data>
  <data name="Successful.Header" xml:space="preserve">
    <value>Successful</value>
  </data>
  <data name="RunSuccess.Text" xml:space="preserve">
    <value>&lt;p&gt;Job successfully trigger, you may view the "history" to see the results.&lt;/p&gt;</value>
  </data>
  <data name="SupportLink.Text" xml:space="preserve">
    <value>Support Forum</value>
  </data>
  <data name="ManageJobTypes.Text" xml:space="preserve">
    <value>Manage Job Types</value>
  </data>
</root>