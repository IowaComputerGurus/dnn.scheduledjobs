IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}ICG_SJ_TruncateEventLog]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}ICG_SJ_TruncateEventLog]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ICG_SJ_TruncateEventLog]
AS
	/*
		Adapted from https://github.com/dnnwerk/truncateEventlog/blob/master/TruncateEventlog2.sql created by Sebastian Leupold

		Adjusted to not require version information given that the extension cannot be installed on this version if on a older release.
	*/
	-- Drop Foreign Key Constraints:
	DECLARE @fkName nVarChar(100) = Null;
	SELECT @fkName = name FROM sys.foreign_keys 
	 WHERE parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ExceptionEvents]')
	   AND Object_id IN (SELECT constraint_object_id  
	                      FROM  sys.foreign_key_columns F 
						  JOIN  sys.columns C ON F.parent_object_id = C.object_id AND F.parent_column_id = C.column_ID 
						  WHERE C.Name = N'LogEventID');
	IF Not @fkName Is Null
		Exec(N'ALTER TABLE {databaseOwner}[{objectQualifier}ExceptionEvents] DROP CONSTRAINT [' + @fkName +'];');

	SET @fkName = Null;
	SELECT @fkName = name FROM sys.foreign_keys 
	 WHERE parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EventLog]')
	   AND Object_id IN (SELECT constraint_object_id  
	                      FROM  sys.foreign_key_columns F 
						  JOIN  sys.columns C ON F.parent_object_id = C.object_id AND F.parent_column_id = C.column_ID 
						  WHERE C.Name = N'ExceptionHash');
	IF Not @fkName Is Null
		Exec(N'ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] DROP CONSTRAINT [' + @fkName +']')

	--Do the actual cleanup
	TRUNCATE TABLE {databaseOwner}[{objectQualifier}Exceptions]
	TRUNCATE TABLE {databaseOwner}[{objectQualifier}ExceptionEvents]
	TRUNCATE TABLE {databaseOwner}[{objectQualifier}EventLog]

	--Add the FK's back
	-- Recreate Foreign Key Constraints (using common naming):
	ALTER TABLE {databaseOwner}[{objectQualifier}ExceptionEvents] 
	  WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}ExceptionEvents_EventLog] 
		FOREIGN KEY([LogEventID])
		REFERENCES {databaseOwner}[{objectQualifier}EventLog] ([LogEventID])
	  ON DELETE CASCADE;
	  
	ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] 
	  WITH CHECK ADD CONSTRAINT [FK_{objectQualifier}EventLog_Exceptions] 
		FOREIGN KEY([ExceptionHash])
		REFERENCES {databaseOwner}[{objectQualifier}Exceptions] ([ExceptionHash])
	  ON DELETE NO ACTION;
GO

IF EXISTS(SELECT * FROM {databaseOwner}[{objectQualifier}ICG_SJ_JobTypes] WHERE CannedProcedure = 'ICG_SJ_TruncateEventLog')
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}ICG_SJ_JobTypes]
	SET JobTitle = 'Clear Admin Logs',
		JobDescription = 'This method clears the <em>Admin Logs</em> within DNN Platform.  This includes the actual errors, the exception history, and related data.'
	WHERE CannedProcedure = 'ICG_SJ_TruncateEventLog'
END

GO
